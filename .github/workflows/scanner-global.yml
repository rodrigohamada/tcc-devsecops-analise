name: Scanner de Segurança Universal

on:
  workflow_dispatch:
    inputs:
      repo_url:
        description: 'URL completa do repositório GitHub público a ser escaneado'
        required: true
        default: ''

jobs:
  # Job 1: Apenas para extrair o nome do repositório da URL
  get-repo-name:
    runs-on: ubuntu-latest
    outputs:
      repo_name: ${{ steps.get_name.outputs.repository }}
    steps:
      - name: Extrair nome do repositório da URL
        id: get_name
        uses: ASzc/get-repo-name-action@v1
        with:
          repository: ${{ github.event.inputs.repo_url }}

  # Job 2: O nosso scanner principal, que agora depende do Job 1
  scan-and-report:
    needs: get-repo-name # Define que este job só começa depois que 'get-repo-name' terminar
    runs-on: ubuntu-latest
    
    # Define um nome dinâmico para cada execução do workflow
    name: Scan do repo ${{needs.get-repo-name.outputs.repo_name}} por ${{ github.actor }}

    steps:
      - name: 1. Checkout do código do Scanner
        uses: actions/checkout@v4

      - name: 2. Instalar Ferramentas
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip pandoc texlive-xetex texlive-latex-extra texlive-fonts-recommended fonts-noto gitleaks
          sudo pipx install semgrep

      - name: 3. Clonar Repositório Alvo
        run: |
          git clone ${{ github.event.inputs.repo_url }} target_repo --depth 1
      
      - name: 4. Executar Scans de Segurança
        run: |
          # O nome do repositório agora vem do output do primeiro job
          REPO_NAME=${{needs.get-repo-name.outputs.repo_name}}
          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV
          cd target_repo
          semgrep scan --config auto --json > ../semgrep-output.json
          gitleaks detect --report-format json --report-path ../gitleaks-output.json
          docker run --rm -v $(pwd):/scan-target aquasec/trivy:latest fs --format json --output /scan-target/../trivy-output.json /scan-target

      - name: 5. Gerar Relatórios
        run: |
          python3 report.py ${{needs.get-repo-name.outputs.repo_name}}
      
      - name: 6. Converter Relatório para PDF com Formatação Avançada
        run: |
          REPO_NAME=${{needs.get-repo-name.outputs.repo_name}}
          pandoc \
            --pdf-engine=xelatex \
            -V mainfont="Noto Serif" \
            -V sansfont="Noto Sans" \
            -V geometry:"a4paper, margin=1in" \
            -V header-includes:"\\usepackage{tabularx}" \
            -V header-includes:"\\usepackage{fvextra}" \
            -V header-includes:"\\DefineVerbatimEnvironment{verbatim}{Verbatim}{breaklines,commandchars=\\\\\\{\\}}" \
            --table-of-contents \
            -f markdown "temp-report-for-pdf.md" \
            -o "relatorio-$REPO_NAME.pdf"

      - name: 7. Upload dos Relatórios Finais (MD e PDF)
        uses: actions/upload-artifact@v4
        with:
          name: Relatorio-Scanner-${{needs.get-repo-name.outputs.repo_name}}
          path: |
            relatorio-${{needs.get-repo-name.outputs.repo_name}}.md
            relatorio-${{needs.get-repo-name.outputs.repo_name}}.pdf
