name: Scanner de Segurança Universal

run-name: Scan do repositório ${{ github.event.inputs.repo_url }} por ${{ github.actor }}

on:
  workflow_dispatch:
    inputs:
      repo_url:
        description: 'URL completa do repositório GitHub público a ser escaneado'
        required: true
        default: 'https://github.com/rodrigohamada/tcc-devsecops-analise'

jobs:
  escanear-e-relatar:
    runs-on: ubuntu-latest
    
    steps:
      - name: 1. Extrair nome do repositório
        run: |
          NOME_REPO=$(basename ${{ github.event.inputs.repo_url }} .git)
          echo "NOME_REPO=$NOME_REPO" >> $GITHUB_ENV

      - name: 2. Validar URL do Repositório
        run: |
          if [[ "${{ github.event.inputs.repo_url }}" == *"/blob/"* ]]; then
            echo "::error::URL inválida. Forneça a URL principal do repositório (ex: https://github.com/usuario/repo), não a de um arquivo específico."
            exit 1
          fi
          echo "URL validada com sucesso."

      - name: 3. Checkout do código do Scanner
        uses: actions/checkout@v4

      - name: 4. Instalar Ferramentas Necessárias
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip pandoc texlive-latex-base texlive-latex-extra texlive-xetex gitleaks zip
          sudo pipx install semgrep

      - name: 5. Clonar Repositório Alvo
        run: |
          git clone ${{ github.event.inputs.repo_url }} target_repo --depth 1
      
      - name: 6. Executar Scans de Segurança
        run: |
          cd target_repo
          semgrep scan --config auto --json > ../semgrep-saida.json || true
          gitleaks detect --report-format json --report-path ../gitleaks-saida.json || true
          docker run --rm -v $(pwd):/scan-target aquasec/trivy:latest fs --format json --output /scan-target/../trivy-saida.json /scan-target || true

      - name: 7. Instalar dependências Python
        run: |
          pip install -r requirements.txt

      - name: 8. Gerar Relatório do Scanner
        run: |
          python3 report.py ${{ env.NOME_REPO }}
      
      - name: 9. Converter Relatório do Scanner para PDF
        run: |
          pandoc \
            -V geometry:"a4paper, margin=1in" \
            --table-of-contents \
            "temp-report-for-pdf.md" \
            -o "relatorio-${{ env.NOME_REPO }}.pdf"

      - name: 10. Executar Correções Automáticas via IA
        run: |
          python3 ai_fix.py \
            --repo-dir target_repo \
            --semgrep semgrep-saida.json \
            --gitleaks gitleaks-saida.json \
            --trivy trivy-saida.json \
            --saida-zip fixes-${{ env.NOME_REPO }}.zip

      - name: 11. Upload dos Relatórios e Arquivos de Correção
        uses: actions/upload-artifact@v4
        with:
          name: Resultados-Scanner-${{ env.NOME_REPO }}
          path: |
            relatorio-${{ env.NOME_REPO }}.md
            relatorio-${{ env.NOME_REPO }}.pdf
            fixes-${{ env.NOME_REPO }}.zip
            fix-report-${{ env.NOME_REPO }}.pdf
