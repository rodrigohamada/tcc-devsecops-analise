name: Pipeline DevSecOps com Segurança Integrada

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  security-analysis:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
      - name: 1. Checkout do Código
        uses: actions/checkout@v4

      - name: 2. Inicializar CodeQL para análise SAST
        uses: github/codeql-action/init@v3
        with:
          languages: python

      - name: 3. Scan de Vulnerabilidades e Segredos com Trivy
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          exit-code: '1' # Mantemos a falha, pois é importante para o workflow
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: 4. Configurar Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: 5. Instalar Dependências
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 6. Executar Testes Unitários
        run: |
          python -c 'from app import init_db; init_db()'
          python test_app.py
          
      # --- FINALIZAÇÃO E UPLOAD DOS RESULTADOS DE SEGURANÇA ---
      - name: 7. Executar Análise final do CodeQL
        # CORREÇÃO APLICADA AQUI: Garante que a análise do CodeQL rode mesmo se o Trivy falhar.
        if: always()
        uses: github/codeql-action/analyze@v3

      - name: 8. Upload dos resultados do Trivy para a aba de Segurança
        # CORREÇÃO APLICADA AQUI: Garante que o upload do SARIF rode mesmo se o Trivy falhar.
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
