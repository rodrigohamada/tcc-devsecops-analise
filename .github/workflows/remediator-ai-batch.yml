name: Agente de Remediação em Lote com IA

on:
  workflow_dispatch:
    inputs:
      repo_url:
        description: 'URL do repositório a ser escaneado e corrigido'
        required: true
        default: 'https://github.com/rodrigohamada/tcc-devsecops-analise'

jobs:
  batch-remediate-bot:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: 1. Checkout do código do Agente
        uses: actions/checkout@v4

      - name: 2. Instalar Ferramentas
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip gitleaks
          sudo pipx install semgrep
          echo "/opt/pipx_bin" >> $GITHUB_PATH
          pip install requests

      - name: 3. Clonar Repositório Alvo
        run: git clone ${{ github.event.inputs.repo_url }} target_repo --depth 1
      
      - name: 4. Executar Scans de Segurança
        run: |
          # Executa os scans a partir do diretório principal, salvando os relatórios na raiz
          semgrep scan ./target_repo --config auto --json --output semgrep-output.json || true
          gitleaks detect -s ./target_repo -r gitleaks-output.json --no-git || true
          
          # CORREÇÃO: Mapeia o diretório de trabalho atual para /workspace dentro do contêiner.
          # O Trivy escaneia a subpasta /workspace/target_repo e salva o relatório em /workspace/trivy-output.json,
          # que corresponde à raiz do nosso workflow.
          docker run --rm -v $(pwd):/workspace aquasec/trivy:latest fs /workspace/target_repo --format json --output /workspace/trivy-output.json || true

      - name: 5. Executar IA para Gerar Plano de Correção
        id: remediation_step
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          python3 intelligent_batch_remediator.py
          if [ -f "batch_remediation_log.json" ] && [ $(wc -c < batch_remediation_log.json) -gt 5 ]; then
            echo "plan_exists=true" >> $GITHUB_OUTPUT
          else
            echo "plan_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: 6. Aplicar Correções e Criar Pull Request
        if: steps.remediation_step.outputs.plan_exists == 'true'
        run: python3 apply_batch_fix.py
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
          REPO_URL: ${{ github.event.inputs.repo_url }}
          RUN_ID: ${{ github.run_id }}
