name: Agente de Remedia칞칚o com IA

on:
  workflow_dispatch:
    inputs:
      repo_url:
        description: 'URL do reposit칩rio p칰blico a ser escaneado e corrigido'
        required: true
        default: 'https://github.com/rodrigohamada/tcc-devsecops-analise'

jobs:
  scan-and-remediate-bot:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: 1. Checkout do c칩digo do Agente
        uses: actions/checkout@v4

      - name: 2. Instalar Ferramentas
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip gitleaks jq pandoc texlive-latex-extra
          sudo pipx install semgrep
          echo "/opt/pipx_bin" >> $GITHUB_PATH
          pip install requests

      - name: 3. Clonar Reposit칩rio Alvo
        run: git clone ${{ github.event.inputs.repo_url }} target_repo --depth 1
      
      - name: 4. Executar Scans de Seguran칞a
        run: |
          cd target_repo
          semgrep scan --config auto --json --output ../semgrep-output.json || true
          gitleaks detect --report-format json --report-path ../gitleaks-output.json || true
          docker run --rm -v $(pwd):/scan-target aquasec/trivy:latest fs --format json --output /scan-target/../trivy-output.json /scan-target || true

      - name: 5. Executar IA para Gerar Plano de Corre칞칚o
        id: remediation_step
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          python3 intelligent_remediator.py
          if [ -f "remediation_plan.json" ]; then
            echo "plan_exists=true" >> $GITHUB_OUTPUT
          else
            echo "plan_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: 6. Gerar Relat칩rio PDF e Corpo do PR
        if: steps.remediation_step.outputs.plan_exists == 'true'
        run: |
          python3 remediation_report.py "${{ github.event.inputs.repo_url }}"
          pandoc remediation-report.md -o remediation-report.pdf
          python3 create_pr_body.py

      - name: 7. Aplicar Corre칞칚o e Criar Pull Request
        if: steps.remediation_step.outputs.plan_exists == 'true'
        run: |
          # Cria e executa o script de substitui칞칚o
          cat << 'EOF' > replacer.py
          import os, sys
          file_path = os.getenv("FILE_TO_FIX")
          vulnerable_code = os.getenv("VULNERABLE_CODE")
          suggested_fix = os.getenv("SUGGESTED_FIX")
          try:
              with open(file_path, 'r', encoding='utf-8') as file: content = file.read()
              new_content = content.replace(vulnerable_code, suggested_fix)
              with open(file_path, 'w', encoding='utf-8') as file: file.write(new_content)
          except Exception as e:
              print(f"Erro: {e}"); sys.exit(1)
          EOF
          
          URL=${{ github.event.inputs.repo_url }}
          REPO_OWNER=$(echo "$URL" | cut -d'/' -f4)
          REPO_NAME=$(echo "$URL" | cut -d'/' -f5 | sed 's/\.git$//')
          git clone https://x-access-token:${{ secrets.GH_PAT }}@github.com/${REPO_OWNER}/${REPO_NAME}.git target_repo_pr
          
          export FILE_TO_FIX="target_repo_pr/$(jq -r '.file' remediation_plan.json)"
          export VULNERABLE_CODE="$(jq -r '.vulnerable_code' remediation_plan.json)"
          export SUGGESTED_FIX="$(jq -r '.suggested_fix' remediation_plan.json)"
          python3 replacer.py

          # Continua com a cria칞칚o do PR
          cd target_repo_pr
          RULE_ID_VALUE=$(jq -r '.rule' ../remediation_plan.json)
          SANITIZED_RULE_ID=$(echo "$RULE_ID_VALUE" | tr -s '[:punct:][:space:]' '-' | tr -s '-' | sed 's/^-//;s/-$//')
          BRANCH_NAME="fix/ai-remediation-${SANITIZED_RULE_ID}-${{ github.run_id }}"
          git checkout -b $BRANCH_NAME
          git config --global user.name "DevSecOps AI Bot 游뱄"
          git config --global user.email "actions@github.com"
          git add .
          git commit -m "fix(security): Corre칞칚o autom치tica por IA para ${RULE_ID_VALUE}"
          git push origin $BRANCH_NAME
          
          # Comando 'gh' simplificado, lendo o corpo do arquivo gerado pelo Python
          gh pr create \
            --title "[BOT] Corre칞칚o Sugerida por IA para ${RULE_ID_VALUE}" \
            --body-file ../pr_body.md
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
          GH_TOKEN: ${{ secrets.GH_PAT }}

      - name: 8. Upload dos Artefatos
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Relatorios-Remediacao-${{ github.run_id }}
          path: |
            remediation-report.md
            remediation-report.pdf
          retention-days: 7
