name: Agente de Remedia칞칚o com IA

on:
  workflow_dispatch:
    inputs:
      repo_url:
        description: 'URL do reposit칩rio p칰blico a ser escaneado e corrigido'
        required: true
        default: 'https://github.com/rodrigohamada/tcc-devsecops-analise'

jobs:
  scan-and-remediate-bot:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: 1. Checkout do c칩digo do Agente
        uses: actions/checkout@v4

      - name: 2. Instalar Ferramentas e Configurar PATH
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip gitleaks jq
          sudo pipx install semgrep
          echo "/opt/pipx_bin" >> $GITHUB_PATH
          pip install requests

      - name: 3. Clonar Reposit칩rio Alvo
        run: git clone ${{ github.event.inputs.repo_url }} target_repo --depth 1
      
      - name: 4. Executar Scans de Seguran칞a no Alvo
        run: |
          cd target_repo
          semgrep scan --config auto --json --output ../semgrep-output.json || true
          gitleaks detect --report-format json --report-path ../gitleaks-output.json || true
          docker run --rm -v $(pwd):/scan-target aquasec/trivy:latest fs --format json --output /scan-target/../trivy-output.json /scan-target || true

      - name: 5. Executar IA para Gerar Plano de Corre칞칚o
        id: remediation_step
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          python3 intelligent_remediator.py
          if [ -f "remediation_plan.json" ]; then
            echo "plan_exists=true" >> $GITHUB_OUTPUT
          else
            echo "plan_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: 6. Aplicar Corre칞칚o e Criar Pull Request
        if: steps.remediation_step.outputs.plan_exists == 'true'
        run: |
          cat << 'EOF' > replacer.py
          import os
          import sys
          
          file_path = os.getenv("FILE_TO_FIX")
          vulnerable_code = os.getenv("VULNERABLE_CODE")
          suggested_fix = os.getenv("SUGGESTED_FIX")
          
          if not all([file_path, vulnerable_code, suggested_fix]):
              print("Erro: Uma das vari치veis de ambiente para a corre칞칚o n칚o foi definida.")
              sys.exit(1)
          
          try:
              with open(file_path, 'r', encoding='utf-8') as file:
                  content = file.read()
              
              new_content = content.replace(vulnerable_code, suggested_fix)
              
              with open(file_path, 'w', encoding='utf-8') as file:
                  file.write(new_content)
              print(f"Arquivo {file_path} atualizado com sucesso.")
          except Exception as e:
              print(f"Erro ao atualizar o arquivo: {e}")
              sys.exit(1)
          EOF

          FILE_TO_FIX_VALUE=$(jq -r '.file' remediation_plan.json)
          VULNERABLE_CODE_VALUE=$(jq -r '.vulnerable_code' remediation_plan.json)
          SUGGESTED_FIX_VALUE=$(jq -r '.suggested_fix' remediation_plan.json)
          RULE_ID_VALUE=$(jq -r '.rule' remediation_plan.json)

          URL=${{ github.event.inputs.repo_url }}
          REPO_OWNER=$(echo "$URL" | cut -d'/' -f4)
          REPO_NAME=$(echo "$URL" | cut -d'/' -f5 | sed 's/\.git$//')
          git clone https://x-access-token:${{ secrets.GH_PAT }}@github.com/${REPO_OWNER}/${REPO_NAME}.git target_repo_pr
          cd target_repo_pr

          export FILE_TO_FIX="$FILE_TO_FIX_VALUE"
          export VULNERABLE_CODE="$VULNERABLE_CODE_VALUE"
          export SUGGESTED_FIX="$SUGGESTED_FIX_VALUE"
          python3 ../replacer.py

          SANITIZED_RULE_ID=$(echo "$RULE_ID_VALUE" | tr -s '[:punct:][:space:]' '-' | tr -s '-' | sed 's/^-//;s/-$//')
          # CORRE칂츾O FINAL: Cria um nome de branch 칰nico para cada execu칞칚o
          BRANCH_NAME="fix/ai-remediation-${SANITIZED_RULE_ID}-${{ github.run_id }}"
          
          git checkout -b $BRANCH_NAME
          
          git config --global user.name "DevSecOps AI Bot 游뱄"
          git config --global user.email "actions@github.com"
          git add .
          git commit -m "fix(security): Corre칞칚o autom치tica por IA para ${RULE_ID_VALUE}"
          git push origin $BRANCH_NAME

          gh pr create \
            --title "[BOT] Corre칞칚o de Seguran칞a Sugerida por IA para ${RULE_ID_VALUE}" \
            --body "Este PR foi gerado automaticamente pelo Agente de Remedia칞칚o.\n\nA IA analisou a vulnerabilidade **${RULE_ID_VALUE}** e sugeriu a seguinte corre칞칚o no arquivo \`${FILE_TO_FIX_VALUE}\`:\n\n**Substituir:**\n\`\`\`\n${VULNERABLE_CODE_VALUE}\n\`\`\`\n\n**Por:**\n\`\`\`\n${SUGGESTED_FIX_VALUE}\n\`\`\`\n\nPor favor, revise, teste e aprove a altera칞칚o."
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
          GH_TOKEN: ${{ secrets.GH_PAT }}
