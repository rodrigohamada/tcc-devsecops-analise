name: Agente de Remedia칞칚o com IA

on:
  workflow_dispatch:
    inputs:
      repo_url:
        description: 'URL do reposit칩rio p칰blico a ser escaneado e corrigido'
        required: true
        # Para testar, vamos usar o seu pr칩prio reposit칩rio como padr칚o
        default: 'https://github.com/rodrigohamada/tcc-devsecops-analise'

jobs:
  scan-and-remediate-bot:
    runs-on: ubuntu-latest
    permissions:
      contents: write      # Permiss칚o para fazer commit e push
      pull-requests: write # Permiss칚o para criar Pull Requests
    
    steps:
      - name: 1. Extrair Nome do Reposit칩rio
        id: get_repo_name
        run: |
          REPO_NAME=$(basename ${{ github.event.inputs.repo_url }} .git)
          echo "repo_name=${REPO_NAME}" >> $GITHUB_OUTPUT

      - name: 2. Checkout do c칩digo do Agente (para pegar os scripts)
        uses: actions/checkout@v4

      - name: 3. Instalar Ferramentas
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip gitleaks jq
          sudo pipx install semgrep

      - name: 4. Clonar Reposit칩rio Alvo
        run: git clone ${{ github.event.inputs.repo_url }} target_repo --depth 1
      
      - name: 5. Executar Scans de Seguran칞a no Alvo
        run: |
          cd target_repo
          semgrep scan --config auto --json --output ../semgrep-output.json || true
          gitleaks detect --report-format json --report-path ../gitleaks-output.json || true
          docker run --rm -v $(pwd):/scan-target aquasec/trivy:latest fs --format json --output /scan-target/../trivy-output.json /scan-target || true

      - name: 6. Executar IA para Gerar Plano de Corre칞칚o
        id: remediation_step
        run: |
          python3 intelligent_remediator.py
          if [ -f "remediation_plan.json" ]; then
            echo "plan_exists=true" >> $GITHUB_OUTPUT
          else
            echo "plan_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: 7. Aplicar Corre칞칚o e Criar Pull Request
        if: steps.remediation_step.outputs.plan_exists == 'true'
        run: |
          # Carrega os detalhes do plano de corre칞칚o usando jq (mais seguro)
          FILE_TO_FIX=$(jq -r '.file' remediation_plan.json)
          # Para o comando sed, precisamos escapar caracteres especiais como /
          VULNERABLE_CODE_RAW=$(jq -r '.vulnerable_code' remediation_plan.json)
          VULNERABLE_CODE_ESCAPED=$(sed 's/[&/\]/\\&/g' <<<"$VULNERABLE_CODE_RAW")
          SUGGESTED_FIX_RAW=$(jq -r '.suggested_fix' remediation_plan.json)
          SUGGESTED_FIX_ESCAPED=$(sed 's/[&/\]/\\&/g' <<<"$SUGGESTED_FIX_RAW")
          RULE_ID=$(jq -r '.rule' remediation_plan.json)

          # Clona o reposit칩rio alvo novamente para fazer a altera칞칚o
          git clone https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} target_repo_pr
          cd target_repo_pr

          # Cria uma nova branch para a corre칞칚o
          BRANCH_NAME="fix/ai-remediation-${RULE_ID}"
          git checkout -b $BRANCH_NAME

          # Aplica a corre칞칚o de forma segura
          sed -i "s|${VULNERABLE_CODE_ESCAPED}|${SUGGESTED_FIX_ESCAPED}|g" "${FILE_TO_FIX}"
          
          # Faz o commit e push da corre칞칚o
          git config --global user.name "DevSecOps AI Bot 游뱄"
          git config --global user.email "bot@github.actions"
          git add .
          git commit -m "fix(security): Corre칞칚o autom치tica por IA para ${RULE_ID}"
          git push origin $BRANCH_NAME

          # Cria o Pull Request
          gh pr create \
            --title "[BOT] Corre칞칚o de Seguran칞a Sugerida por IA para ${RULE_ID}" \
            --body "Este PR foi gerado automaticamente pelo Agente de Remedia칞칚o.\n\nA IA analisou a vulnerabilidade **${RULE_ID}** e sugeriu a seguinte corre칞칚o:\n\n**Substituir:**\n\`\`\`\n${VULNERABLE_CODE_RAW}\n\`\`\`\n\n**Por:**\n\`\`\`\n${SUGGESTED_FIX_RAW}\n\`\`\`\n\nPor favor, revise, teste e aprove a altera칞칚o."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
