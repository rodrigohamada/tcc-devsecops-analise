name: Agente de Remedia칞칚o com IA

on:
  workflow_dispatch:
    inputs:
      repo_url:
        description: 'URL do reposit칩rio p칰blico a ser escaneado e corrigido'
        required: true
        default: 'https://github.com/rodrigohamada/tcc-devsecops-analise'

jobs:
  scan-and-remediate-bot:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: 1. Checkout do c칩digo do Agente
        uses: actions/checkout@v4

      - name: 2. Instalar Ferramentas e Configurar PATH
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip gitleaks jq pandoc texlive-latex-extra
          sudo pipx install semgrep
          echo "/opt/pipx_bin" >> $GITHUB_PATH
          pip install requests

      - name: 3. Clonar Reposit칩rio Alvo
        run: git clone ${{ github.event.inputs.repo_url }} target_repo --depth 1
      
      - name: 4. Executar Scans de Seguran칞a no Alvo
        run: |
          cd target_repo
          semgrep scan --config auto --json --output ../semgrep-output.json || true
          gitleaks detect --report-format json --report-path ../gitleaks-output.json || true
          docker run --rm -v $(pwd):/scan-target aquasec/trivy:latest fs --format json --output /scan-target/../trivy-output.json /scan-target || true

      - name: 5. Executar IA para Gerar Plano de Corre칞칚o
        id: remediation_step
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          python3 intelligent_remediator.py
          if [ -f "remediation_plan.json" ]; then
            echo "plan_exists=true" >> $GITHUB_OUTPUT
          else
            echo "plan_exists=false" >> $GITHUB_OUTPUT
          fi

      # ETAPA 6: Aplicar a corre칞칚o no c칩digo
      - name: 6. Aplicar Corre칞칚o de C칩digo
        if: steps.remediation_step.outputs.plan_exists == 'true'
        id: apply_fix
        run: |
          # Gera e executa o script Python que faz a substitui칞칚o do c칩digo
          cat << 'EOF' > replacer.py
          import os, sys
          file_path = os.getenv("FILE_TO_FIX")
          vulnerable_code = os.getenv("VULNERABLE_CODE")
          suggested_fix = os.getenv("SUGGESTED_FIX")
          if not all([file_path, vulnerable_code, suggested_fix]): sys.exit(1)
          try:
              with open(file_path, 'r', encoding='utf-8') as file: content = file.read()
              new_content = content.replace(vulnerable_code, suggested_fix)
              with open(file_path, 'w', encoding='utf-8') as file: file.write(new_content)
              print(f"Arquivo {file_path} atualizado com sucesso.")
          except Exception as e:
              print(f"Erro ao atualizar o arquivo: {e}"); sys.exit(1)
          EOF

          # Clona o repo e executa a substitui칞칚o
          URL=${{ github.event.inputs.repo_url }}
          REPO_OWNER=$(echo "$URL" | cut -d'/' -f4)
          REPO_NAME=$(echo "$URL" | cut -d'/' -f5 | sed 's/\.git$//')
          echo "REPO_OWNER=${REPO_OWNER}" >> $GITHUB_ENV
          echo "REPO_NAME=${REPO_NAME}" >> $GITHUB_ENV
          git clone https://x-access-token:${{ secrets.GH_PAT }}@github.com/${REPO_OWNER}/${REPO_NAME}.git target_repo_pr
          
          export FILE_TO_FIX="target_repo_pr/$(jq -r '.file' remediation_plan.json)"
          export VULNERABLE_CODE="$(jq -r '.vulnerable_code' remediation_plan.json)"
          export SUGGESTED_FIX="$(jq -r '.suggested_fix' remediation_plan.json)"
          python3 replacer.py

      # ETAPA 7: Gerar o relat칩rio e o PDF
      - name: 7. Gerar Relat칩rios (MD e PDF)
        if: steps.remediation_step.outputs.plan_exists == 'true'
        run: |
          python3 remediation_report.py "${{ github.event.inputs.repo_url }}"
          pandoc remediation-report.md -o remediation-report.pdf

      # ETAPA 8: Criar o Pull Request
      - name: 8. Criar Pull Request com a Corre칞칚o
        if: steps.remediation_step.outputs.plan_exists == 'true'
        run: |
          cd target_repo_pr
          RULE_ID_VALUE=$(jq -r '.rule' ../remediation_plan.json)
          SANITIZED_RULE_ID=$(echo "$RULE_ID_VALUE" | tr -s '[:punct:][:space:]' '-' | tr -s '-' | sed 's/^-//;s/-$//')
          BRANCH_NAME="fix/ai-remediation-${SANITIZED_RULE_ID}-${{ github.run_id }}"
          
          git checkout -b $BRANCH_NAME
          
          git config --global user.name "DevSecOps AI Bot 游뱄"
          git config --global user.email "actions@github.com"
          git add .
          git commit -m "fix(security): Corre칞칚o autom치tica por IA para ${RULE_ID_VALUE}"
          git push origin $BRANCH_NAME

          # Define o corpo do PR em uma vari치vel para maior clareza
          PR_BODY=$(cat <<'EOM'
          ### 游뱄 Remedia칞칚o Autom치tica por IA

          Este Pull Request foi gerado automaticamente pelo Agente de Seguran칞a para corrigir uma vulnerabilidade detectada.

          **Vulnerabilidade:** `${RULE_ID_VALUE}`
          **Arquivo Afetado:** `${FILE_TO_FIX_VALUE}`

          ---
          #### C칩digo Vulner치vel Identificado
          ```
          ${VULNERABLE_CODE_VALUE}
          ```

          #### Corre칞칚o Sugerida pela IA
          ```
          ${SUGGESTED_FIX_VALUE}
          ```
          ---

          **A칞칚o Necess치ria:** Por favor, revise a altera칞칚o, execute os testes necess치rios e aprove este Pull Request para integrar a corre칞칚o.
          EOM
          )

          # Carrega as vari치veis para usar no corpo do PR
          FILE_TO_FIX_VALUE=$(jq -r '.file' ../remediation_plan.json)
          VULNERABLE_CODE_VALUE=$(jq -r '.vulnerable_code' ../remediation_plan.json)
          SUGGESTED_FIX_VALUE=$(jq -r '.suggested_fix' ../remediation_plan.json)
          # Expande as vari치veis dentro do corpo do PR
          eval "PR_BODY=\"$PR_BODY\""

          gh pr create \
            --title "[BOT] Corre칞칚o de Seguran칞a Sugerida por IA para ${RULE_ID_VALUE}" \
            --body "$PR_BODY"
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
          GH_TOKEN: ${{ secrets.GH_PAT }}

      # ETAPA 9: Fazer o upload de TODOS os artefatos
      - name: 9. Upload dos Artefatos
        if: always() # Roda mesmo se uma etapa anterior falhar
        uses: actions/upload-artifact@v4
        with:
          name: Resultados-Scanner-e-Remediacao
          path: |
            remediation-report.md
            remediation-report.pdf
            remediation_plan.json
            semgrep-output.json
            gitleaks-output.json
            trivy-output.json
          retention-days: 7
